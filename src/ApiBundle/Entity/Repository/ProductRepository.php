<?php

namespace ApiBundle\Entity\Repository;
/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

use Site\FrontendBundle\Services\FilterQueryHelper;

class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function exportGlassProductForGoogle()
    {
        return $this->createQueryBuilder('q')
            ->select('q, category, phones, vendor')
            ->leftJoin('q.category', 'category')
            ->leftJoin('q.phones', 'phones')
            ->leftJoin('phones.vendor', 'vendor')
            ->where('category.slug = :slug')
            ->setParameter('slug', 'stekla')
            ->getQuery()
            ->getArrayResult();
    }

    public function exportProductForGoogle(){
        return $this->createQueryBuilder('q')
            ->select('q, category, phones, vendor')
            ->leftJoin('q.category', 'category')
            ->leftJoin('q.phones', 'phones')
            ->leftJoin('phones.vendor', 'vendor')
            ->where('category.slug != :slug')
            ->setParameter('slug', 'stekla')
            ->getQuery()
            ->getArrayResult();
    }

    public function getByIdsForSearch($ids)
    {
        $query = $this->createQueryBuilder('q');
        $query
            ->andWhere('q.id IN (:ids)')
            ->setParameters([
                'ids' => $ids,
            ]);

        $result = $query->getQuery()->getResult();

        return $result;
    }

    public function getProductsForBestOfferCollection($id, $filter = [])
    {

        $q = $this->createQueryBuilder('p')
            ->leftJoin('p.bestOffers', 'bo')
            ->where('bo.id = :id')
            ->setParameter('id', $id);
        if (isset($filter['phones']) && $filter['phones']) {
            $q->leftJoin('p.phones', 'ph')
                ->andWhere('ph.id IN (:phones)')
                ->setParameter("phones", $filter['phones']);
        }
        if (isset($filter['types']) && $filter['types']) {
            $q->leftJoin('p.category', 'c')
                ->andWhere('c.id IN (:categories)')
                ->setParameter('categories', $filter['types']);
        }
        return $q->getQuery()->getResult();
    }

    public function getBestOfferAddCollection($id, $filter = [])
    {
        $q = $this->createQueryBuilder('p')
            ->leftJoin('p.bestOffers', 'bo')
            ->where('bo.id != :id OR bo.id IS NULL')
            ->setParameter('id', $id);
        if (isset($filter['phones']) && $filter['phones']) {
            $q->leftJoin('p.phones', 'ph')
                ->andWhere('ph.id IN (:phones)')
                ->setParameter("phones", $filter['phones']);
        }
        if (isset($filter['types']) && $filter['types']) {
            $q->leftJoin('p.category', 'c')
                ->andWhere('c.id IN (:categories)')
                ->setParameter('categories', $filter['types']);
        }
        return $q->getQuery()->getResult();
    }

    public function getByPhone($id, $linkname, $filter, $length = null)
    {
        $q = $this->createQueryBuilder('p')
            ->select('p,ct')
            ->leftJoin('p.bestOffers', 'bo')
            ->leftJoin('p.phones', 'ph')
            ->leftJoin('p.colors', 'cl')
            ->leftJoin('p.materials', 'mt')
            ->leftJoin('p.types', 'tp')
            ->leftJoin('p.tags', 'tg')
            ->leftJoin('p.category', 'ct')
            ->where('ph.id = :id')
            ->andWhere('bo.linkname = :linkname')
            ->andWhere('p.notAvailable = :state')
            ->setParameter('id', $id)
            ->setParameter('state', false)
            ->setParameter('linkname', $linkname);
        if ($filter->range) {
            if ($filter->range['min'] > $filter->range['max']) $filter->range['max'] = $filter->range['min'];
            $q->andWhere('p.filter_price >= :min AND p.filter_price <= :max')
                ->setParameter('min', $filter->range['min'])
                ->setParameter('max', $filter->range['max']);
        }
        if ($filter->promo) {
            $q->andWhere('p.promo_price IS NOT NULL');
        }
        $queryHelper = new FilterQueryHelper();
        $params = [
            [
                'query_alias' => 'ph',
                'property' => 'phones'
            ],
            [
                'query_alias' => 'cl',
                'property' => 'colors'
            ],
            [
                'query_alias' => 'mt',
                'property' => 'materials'
            ],
            [
                'query_alias' => 'tp',
                'property' => 'types'
            ],
            [
                'query_alias' => 'tg',
                'property' => 'tags'
            ],
        ];
        $q = $queryHelper->addFilterItemsQuery($q, $params, $filter);
        if ($length) $q->setMaxResults($length);
        return $q->addOrderBy('p.priority', 'DESC')->getQuery()->getResult();
    }

    public function getProductsByPhone($phone, $category, $filter)
    {
        $q = $this->createQueryBuilder('p')
            ->leftJoin('p.phones', 'ph')
            ->leftJoin('p.category', 'c')
            ->leftJoin('p.colors', 'cl')
            ->leftJoin('p.materials', 'mt')
            ->leftJoin('p.types', 'tp')
            ->leftJoin('p.tags', 'tg')
            ->where('ph.id = :phone')
            ->andWhere('c.id = :category')
            ->andWhere('p.notAvailable = :state')
            ->setParameter('phone', $phone)
            ->setParameter('state', false)
            ->setParameter('category', $category);
        if ($filter->range) {
            if ($filter->range['min'] > $filter->range['max']) $filter->range['max'] = $filter->range['min'];
            $q->andWhere('p.filter_price >= :min AND p.filter_price <= :max')
                ->setParameter('min', $filter->range['min'])
                ->setParameter('max', $filter->range['max']);
        }
        if ($filter->promo) {
            $q->andWhere('p.promo_price IS NOT NULL');
        }
        $queryHelper = new FilterQueryHelper();
        $params = [
            [
                'query_alias' => 'ph',
                'property' => 'phones'
            ],
            [
                'query_alias' => 'cl',
                'property' => 'colors'
            ],
            [
                'query_alias' => 'mt',
                'property' => 'materials'
            ],
            [
                'query_alias' => 'tp',
                'property' => 'types'
            ],
            [
                'query_alias' => 'tg',
                'property' => 'tags'
            ],
        ];
        $q = $queryHelper->addFilterItemsQuery($q, $params, $filter);
        return $q->orderBy('p.priority', 'DESC')->getQuery()->getResult();
    }

    public function getProductsByCategory($category, $filter)
    {
        $q = $this->createQueryBuilder('p')
            ->leftJoin('p.category', 'c')
            ->leftJoin('p.colors', 'cl')
            ->leftJoin('p.materials', 'mt')
            ->leftJoin('p.types', 'tp')
            ->leftJoin('p.tags', 'tg')
            ->andWhere('c.id = :category')
            ->andWhere('p.notAvailable = :state')
            ->setParameter('state', false)
            ->setParameter('category', $category);
        if ($filter->range) {
            if ($filter->range['min'] > $filter->range['max']) $filter->range['max'] = $filter->range['min'];
            $q->andWhere('p.filter_price >= :min AND p.filter_price <= :max')
                ->setParameter('min', $filter->range['min'])
                ->setParameter('max', $filter->range['max']);
        }
        if ($filter->promo) {
            $q->andWhere('p.promo_price IS NOT NULL');
        }
        $queryHelper = new FilterQueryHelper();
        $params = [
            [
                'query_alias' => 'cl',
                'property' => 'colors'
            ],
            [
                'query_alias' => 'mt',
                'property' => 'materials'
            ],
            [
                'query_alias' => 'tp',
                'property' => 'types'
            ],
            [
                'query_alias' => 'tg',
                'property' => 'tags'
            ],
        ];
        $q = $queryHelper->addFilterItemsQuery($q, $params, $filter);
        return $q->orderBy('p.priority', 'DESC')->getQuery()->getResult();
    }

    public function getByIds($ids)
    {
        return $this->createQueryBuilder('p', 'p.id')
            ->where('p.id IN (:ids)')
            ->setParameter('ids', $ids)
            ->getQuery()
            ->getResult();
    }

    public function getSuggestionsByPhone($id, $slug)
    {
        $q = $this->createQueryBuilder('pr')
            ->select('pr.id')
            ->leftJoin('pr.phones', 'ph');
        return $q->add('where', $q->expr()->andX(
            $q->expr()->eq('ph.id', $q->expr()->literal($id)),
            $q->expr()->eq('pr.notAvailable', $q->expr()->literal(false)),
            $q->expr()->eq('pr.suggestionAvailable', $q->expr()->literal(true)),
            $q->expr()->neq('pr.slug', $q->expr()->literal($slug))
        )
        );
    }

    public function getBySlug($slug)
    {
        return $this->createQueryBuilder('pr')
            ->select('pr,tg')
            ->leftJoin('pr.tags', 'tg')
            ->where('pr.slug = :slug')
            ->andWhere('pr.notAvailable = :state')
            ->setParameter('slug', $slug)
            ->setParameter('state', false)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findOneWithOrderById($id, $orderId)
    {
        return $this->createQueryBuilder('p')
            ->select('p,ph,or')
            ->leftJoin('p.productHasOrders', 'ph')
            ->leftJoin('ph.order', 'or')
            ->where('p.id = :id')
            ->andWhere('or.id = :orderId')
            ->setParameter('id', $id)
            ->setParameter('orderId', $orderId)
            ->getQuery()
            ->getSingleResult();
    }

    public function getAddOrderItems($data)
    {
        $q = $this->createQueryBuilder('p')
            ->select('p');
        if (isset($data['category']) && $data['category']) {
            $q->leftJoin('p.category', 'ct')
                ->andWhere('ct.id = :ctId')
                ->setParameter('ctId', $data['category']);
        }
        if (isset($data['phone']) && $data['phone']) {
            $q->leftJoin('p.phones', 'ph')
                ->andWhere('ph.slug IN (:phSlug)')
                ->setParameter('phSlug', $data['phone']);
        }
        if (!isset($data['phone']) && isset($data['category'])) {
            $q->andWhere('ct.slug != :ctSlug')
                ->setParameter('ctSlug', 'stekla');
        }
        return $q->getQuery()->getResult();
    }

    public function getCodAddOrderItems($data)
    {
        if (!isset($data['text']) || !$data['text']) {
            return null;
        }
        $text = preg_replace('/\s+/', '', $data['text']);
        $text = substr($text, 1, strlen($text));
        $text = explode('-', $text);
        if (count($text) < 1) {
            return null;
        }
        $q = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.id LIKE :id')
            ->setParameter('id', (int)$text[0]);
        if (isset($text[1])) {
            $q->leftJoin('p.phones', 'ph')
                ->andWhere('ph.id IN (:phId)')
                ->setParameter('phId', (int)$text[1]);
        }
        return $q->getQuery()->getResult();
    }

    public function getSuggestionsWithoutPhone($slug)
    {
        $q = $this->createQueryBuilder('pr')
            ->select('pr.id');
        return $q->add('where', $q->expr()->andX(
            $q->expr()->eq('pr.notAvailable', $q->expr()->literal(false)),
            $q->expr()->eq('pr.suggestionAvailable', $q->expr()->literal(true)),
            $q->expr()->lt('size(pr.phones)', 1),
            $q->expr()->neq('pr.slug', $q->expr()->literal($slug))
        )
        );
    }
}
