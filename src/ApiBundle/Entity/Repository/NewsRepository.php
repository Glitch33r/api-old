<?php

namespace ApiBundle\Entity\Repository;
//use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * NewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsRepository extends \Doctrine\ORM\EntityRepository
{
    public function getByIdsForSearch($ids)
    {
        $query = $this->createQueryBuilder('q');
        $query
            ->andWhere('q.id IN (:ids)')
            ->setParameters([
                'ids' => $ids,
            ]);

        $result = $query->getQuery()->getResult();

        return $result;
    }

    public function getNewsForBlock()
    {
        return $this->createQueryBuilder('n')
            ->orderBy('n.createdAt','DESC')
            ->setMaxResults(7)
            ->getQuery()
            ->getResult()
            ;
    }
    public function getAllSortedByDateLimit($lim = 4)
    {
        $q =  $this->createQueryBuilder('n');
        return $q
            ->add('where', $q->expr()->andX(
                $q->expr()->neq('n.status', $q->expr()->literal('NON')),
                $q->expr()->neq('n.type', $q->expr()->literal('head_promo'))
                )
            )
            ->orderBy('n.createdAt', 'DESC')
            ->setMaxResults($lim)
            ->getQuery()
            ->getResult()
            ;
    }
    public function getAllSortedByDate()
    {
        $query = $this->createQueryBuilder('n')
            ->where('n.status != :non')
            ->orderBy('n.createdAt', 'DESC')
            ->setParameter('non', 'NON')
            ->getQuery()
            ->getResult();
        return $query;
    }
    public function getByTypeSortedByDate($type = 'news')
    {
        $query = $this->createQueryBuilder('n')
            ->where('n.status != :non')
            ->andWhere('n.type = :type')
            ->orderBy('n.createdAt', 'DESC')
            ->setParameter('non', 'NON')
            ->setParameter('type', $type)
            ->getQuery()
            ->getResult();
        return $query;
    }
    public function search($searchText)
    {
        return $this->createQueryBuilder('n')
            ->select('n')
            ->where('n.title LIKE :searchText')
            ->orWhere('n.title LIKE :searchText2')
            ->orWhere('n.text LIKE :searchText')
            ->orWhere('n.text LIKE :searchText2')
            ->andWhere('n.status != :non')
            ->setParameter('non', 'NON')
            ->setParameter('searchText', '% '.$searchText.'%')
            ->setParameter('searchText2', $searchText.'%')
            ->orderBy('n.createdAt','DESC')
            ->getQuery()
            ->getResult();
    }
}
