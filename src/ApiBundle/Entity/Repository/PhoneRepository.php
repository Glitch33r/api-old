<?php

namespace ApiBundle\Entity\Repository;

/**
 * PhoneRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PhoneRepository extends \Doctrine\ORM\EntityRepository
{

    public function getArr() {
        return $this->createQueryBuilder('v')
            ->leftJoin('v.vendor','phone')
            ->leftJoin('v.covers','covers')
            ->leftJoin('v.products','products')
            ->select('v, partial phone.{id,title}, partial covers.{id, title}, partial products.{id, title}')
            ->getQuery()
            ->getArrayResult();

    }


    public function getOrderedPhoneByVendor(){
        $phonesList = $this->createQueryBuilder('p')
            ->select('p,v')
            ->leftJoin('p.vendor','v')
            ->orderBy('v.title','ASC')
            ->addOrderBy('p.title','ASC')
            ->getQuery()
            ->getResult()
        ;
        $orderedPhoneNames = [];
        $num=0;
        if(!count($phonesList))return false;
        foreach($phonesList as $item){
            $name = $item->getVendor()->getTitle().' '.$item->getTitle();
            $orderedPhoneNames[$name]=$num;
            $num++;
        }
        return $orderedPhoneNames;
    }
    public function getPhonesGroupByQuery(){
        return $this->createQueryBuilder('p')
            ->leftJoin('p.vendor','v')
            ->addOrderBy('v.title','ASC')
            ->addOrderBy('p.title','ASC')
        ;
    }
    public function getArrayList(){
        $phones = $this->createQueryBuilder('p')
            ->select('p.title,p.id,v.title as vendor')
            ->leftJoin('p.vendor','v')
            ->addOrderBy('v.title','ASC')
            ->addOrderBy('p.title','ASC')
            ->getQuery()
            ->getArrayResult()
        ;
        $result=[];
        if($phones){
            foreach($phones as $phone){
                $result[$phone['vendor']][$phone['title']]=$phone['id'];
            }
        }
        return $result;
    }
    public function getAllQuery(){
        return $this->createQueryBuilder('q')
            ->orderBy('q.title','ASC')
            ;
    }
    public function getByVendor($vendor){
        $q =  $this->createQueryBuilder('ph')
            ->select('ph.id, ph.slug, ph.title,v.title as vendor')
            ->leftJoin('ph.vendor','v')
            ->where('v.id =:id')
            ->andWhere('ph.constructorOverlay IS NOT NULL')
            ->setParameter('id',$vendor)
            ->orderBy('ph.title','ASC')
            ->getQuery()
            ->getResult()
        ;
        $res=[];
        if(count($q)){
            foreach($q as $item){
                $res[$item['title']] = $item['slug'];
            }
        }
        return $res;
    }
    public function getOneWithCoversById($id){
        return $this->createQueryBuilder('p')
            ->select('p,c,bg,pt')
            ->leftJoin('p.covers','c')
            ->leftJoin('c.pattern','pt')
            ->leftJoin('p.phoneBackgrounds','bg')
            ->where('p.id = :id')
            ->andWhere('p.mask IS NOT NULL')
            ->andWhere('p.shadows IS NOT NULL')
            ->andWhere('p.phoneBackgrounds IS NOT EMPTY')
            ->setParameter('id',$id)
            ->getQuery()
            ->getOneOrNullResult();
    }
    public function getAllWithVendorsForBlackCover(){
        return $this->createQueryBuilder('p')
            ->select('p,v')
            ->leftJoin('p.vendor','v')
            ->andWhere('p.mask IS NOT NULL')
            ->andWhere('p.shadows IS NOT NULL')
            ->andWhere('p.phoneBackgrounds IS NOT EMPTY')
            ->andWhere('p.useForBlackCover =:useForBlackCover')
            ->setParameter('useForBlackCover', true)
            ->getQuery()
            ->getResult();
    }

    public function getAllForAnkor(){
        return $this->createQueryBuilder('p')
            ->select('p')
            ->indexBy('p', 'p.slug')
            ->getQuery()
            ->getResult();
    }

    public function getAllWithVendors(){
        return $this->createQueryBuilder('p')
            ->select('p,v')
            ->leftJoin('p.vendor','v')
            ->andWhere('p.mask IS NOT NULL')
            ->andWhere('p.shadows IS NOT NULL')
            ->andWhere('p.phoneBackgrounds IS NOT EMPTY')
            ->getQuery()
            ->getResult();
    }
    public function getBySearchCod($data){
        if(!isset($data['text'])||!$data['text']){
            return null;
        }
        $text = preg_replace('/\s+/', '', $data['text']);
        $text = explode('-',$text);
        if(count($text)<2){
            return null;
        }
        $q = $this->createQueryBuilder('ph')
            ->select('ph')
            ->where('ph.id = :id')
            ->setParameter('id',(int)$text[1])
        ;
        return $q->getQuery()->getOneOrNullResult();
    }
    public function getByVendorAndType($vendor,$type){
        $q =  $this->createQueryBuilder('ph')
            ->select('ph.id, ph.slug, ph.title,v.title as vendor')
            ->leftJoin('ph.vendor','v')
            ->where('v.id =:id')
            ->setParameter('id',$vendor)
            ;
        switch($type){
            case 'cover':
                $q->andWhere('ph.covers IS NOT EMPTY');
                break;
            case 'product':
                $q->andWhere('ph.products IS NOT EMPTY');
                break;
            case 'nscover':
                $q->andWhere('ph.nonStandartCovers IS NOT EMPTY');
                break;
        }
        $q = $q->orderBy('ph.title','ASC')
            ->getQuery()
            ->getResult()
        ;
        $res=[];
        if(count($q)){
            foreach($q as $item){
                $res[$item['title']] = $item['slug'];
            }
        }
        return $res;
    }

    function getForHTMLSitemap()
    {
        $query = self::getAllQuery();

        return $query->where('q.showConstructorInHTMLSitemap =:true')
            ->setParameter('true', true)
            ->getQuery()
            ->getResult();
    }
}
