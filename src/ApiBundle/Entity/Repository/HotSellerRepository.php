<?php

namespace ApiBundle\Entity\Repository;

/**
 * HotSellerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Doctrine\ORM\Query\ResultSetMapping;
use Site\FrontendBundle\Services\PrepareRawSqlHelper;
class HotSellerRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * hot-seller slider query
     * @param $id
     * @param $linkname
     * @param $filter
     * @return array
     */
    public function getByPhone($id,$linkname,$filter,$limit,$nsAvailable=true){
        $covers = $this->getEntityManager()
            ->getRepository('SiteBackendBundle:Cover')
            ->getHotSellerByPhone($id,$linkname,$filter)
            ->getSql()
        ;
        $nonstandart = ($nsAvailable)?$this->getEntityManager()
            ->getRepository('SiteBackendBundle:NonStandartCover')
            ->getHotSellerByPhone($id,$linkname,$filter)
            ->getSql()
            :-1
        ;
        $sql = "SELECT DISTINCT
                coalesce('cover') AS type, c.slug, c.image AS poster, pt.priority+ph.priority AS priority, c.id AS id,
                c.price AS price, c.promo_price AS promoPrice, c.filter_price AS filterPrice, pt.title AS title
                FROM
                cover_table AS c
                LEFT JOIN pattern_table AS pt ON c.pattern_id = pt.id
                LEFT JOIN phone_table AS ph ON c.phone_id = ph.id
                WHERE c.id IN ({$covers})
                union
                SELECT DISTINCT
                coalesce('nonstandart') AS type, ns.slug AS slug, ns.poster AS poster, ns.priority AS priority, ns.id AS id,
                ns.price AS price, ns.promo_price AS promoPrice, ns.filter_price AS filterPrice, ns.title AS title
                FROM
                non_standart_table AS ns
                WHERE ns.id IN ({$nonstandart})
                ORDER BY priority DESC
                LIMIT {$limit}"
        ;
        $conn = $this->getEntityManager()->getConnection()->prepare($sql);
        $conn->execute();
        return $conn->fetchAll(\PDO::FETCH_ASSOC);
    }

    /**
     * array for suggestion slider, current element is excluded via $items construction
     *
     * @param $id
     * @param $type
     * @param $slug
     * @return array
     */
    public function getSuggestionsByPhone($id,$type,$slug,$nsAvailable=true,$productAvailable=true){
        $items=[
            'cover'=>'',
            'nscover'=>'',
            'product'=>''
        ];
        if(isset($items[$type]))$items[$type]=$slug;
        $covers = $this->getEntityManager()
            ->getRepository('SiteBackendBundle:Cover')
            ->getSuggestionsByPhone($id,$items['cover'])
            ->getQuery()
            ->getSql()
        ;
        $nonstandart = ($nsAvailable)?$this->getEntityManager()
            ->getRepository('SiteBackendBundle:NonStandartCover')
            ->getSuggestionsByPhone($id,$items['nscover'])
            ->getQuery()
            ->getSql()
            :-1
        ;
        $products = ($productAvailable)?$this->getEntityManager()
            ->getRepository('SiteBackendBundle:Product')
            ->getSuggestionsByPhone($id,$items['product'])
            ->getQuery()
            ->getSql()
            :-1
        ;
        $phoneLessProducts = ($productAvailable)?$this->getEntityManager()
            ->getRepository('SiteBackendBundle:Product')
            ->getSuggestionsWithoutPhone($items['product'])
            ->getQuery()
            ->getSql()
            :-1
        ;
        $sql = "SELECT DISTINCT
                coalesce('cover') AS type, c.slug, c.image AS poster, (pt.suggestion_weight+COALESCE(c.suggestion_weight,0)) AS priority, c.id AS id,
                c.price AS price, c.promo_price AS promoPrice, c.filter_price AS filterPrice, pt.title AS title,'' AS category
                FROM
                cover_table AS c
                LEFT JOIN pattern_table AS pt ON c.pattern_id = pt.id
                LEFT JOIN phone_table AS ph ON c.phone_id = ph.id
                WHERE c.id IN ({$covers})
                union
                SELECT DISTINCT
                coalesce('nscover') AS type, ns.slug AS slug, ns.poster AS poster, ns.suggestion_weight AS priority, ns.id AS id,
                ns.price AS price, ns.promo_price AS promoPrice, ns.filter_price AS filterPrice, ns.title AS title,'' AS category
                FROM
                non_standart_table AS ns
                WHERE ns.id IN ({$nonstandart})
                union
                SELECT DISTINCT
                coalesce('product') AS type, p.slug AS slug, p.poster AS poster, p.suggestion_weight AS priority, p.id AS id,
                p.price AS price, p.promo_price AS promoPrice, p.filter_price AS filterPrice, p.title AS title,ct.slug AS category
                FROM
                product_table AS p
                LEFT JOIN product_category_table AS ct ON p.category_id = ct.id
                WHERE p.id IN ({$products})
                union
                SELECT DISTINCT
                coalesce('phoneless_product') AS type, pr.slug AS slug, pr.poster AS poster, pr.suggestion_weight AS priority, pr.id AS id,
                pr.price AS price, pr.promo_price AS promoPrice, pr.filter_price AS filterPrice, pr.title AS title,ct.slug AS category
                FROM
                product_table AS pr
                LEFT JOIN product_category_table AS ct ON pr.category_id = ct.id
                WHERE pr.id IN ({$phoneLessProducts})
                ORDER BY priority DESC
                "
        ;
        $conn = $this->getEntityManager()->getConnection()->prepare($sql);
        $conn->execute();
        return $conn->fetchAll(\PDO::FETCH_ASSOC);
    }
    public function getOneById($id){
        return $this->createQueryBuilder('hs')
            ->select('hs,c,ns,nsc,pt,v,ph')
            ->leftJoin('hs.covers','c')
            ->leftJoin('c.pattern','pt')
            ->leftJoin('c.phone','ph')
            ->leftJoin('ph.vendor','v')
            ->leftJoin('hs.nonStandartCovers','ns')
            ->leftJoin('ns.category','nsc')
            ->where('hs.id = :id')
            ->setParameter('id',$id)
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }
    public function getSuggestionsWithoutPhone($type,$product,$nsAvailable=true,$productAvailable=true){
        $items=[
            'cover'=>'',
            'nscover'=>'',
            'product'=>''
        ];
        if(isset($items[$type]))$items[$type]=$product;
        $nonstandart = ($nsAvailable)?$this->getEntityManager()
            ->getRepository('SiteBackendBundle:NonStandartCover')
            ->getSuggestionsWithoutPhone($items['nscover'])
            ->getQuery()
            ->getSql()
            :-1
        ;
        $products = ($productAvailable)?$this->getEntityManager()
            ->getRepository('SiteBackendBundle:Product')
            ->getSuggestionsWithoutPhone($items['product'])
            ->getQuery()
            ->getSql()
            :-1
        ;
        $sql = "SELECT DISTINCT
                coalesce('nscover') AS type, ns.slug AS slug, ns.poster AS poster, ns.suggestion_weight AS priority, ns.id AS id,
                ns.price AS price, ns.promo_price AS promoPrice, ns.filter_price AS filterPrice, ns.title AS title,'' AS category
                FROM
                non_standart_table AS ns
                WHERE ns.id IN ({$nonstandart})
                union
                SELECT DISTINCT
                coalesce('product') AS type, p.slug AS slug, p.poster AS poster, p.suggestion_weight AS priority, p.id AS id,
                p.price AS price, p.promo_price AS promoPrice, p.filter_price AS filterPrice, p.title AS title,ct.slug AS category
                FROM
                product_table AS p
                LEFT JOIN product_category_table AS ct ON p.category_id = ct.id
                WHERE p.id IN ({$products})
                ORDER BY priority DESC"
        ;
        $conn = $this->getEntityManager()->getConnection()->prepare($sql);
        $conn->execute();
        return $conn->fetchAll(\PDO::FETCH_ASSOC);
    }
}
