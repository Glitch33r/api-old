<?php

namespace ApiBundle\Entity\Repository;

/**
 * PatternRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PatternRepository extends \Doctrine\ORM\EntityRepository
{

    public function getArr() {
        return $this->createQueryBuilder('v')->getQuery()->getArrayResult();
    }



    public function getTransparentPatternById($id)
    {
        $result = $this->createQueryBuilder('q')
            ->where('q.alphaImage IS NOT NULL')
            ->orWhere('q.semiTransparentImage IS NOT NULL')
            ->andWhere('q.id =:id')
            ->andWhere('q.isForBlackCover =:isForBlackCover')
            ->setParameter('isForBlackCover', 0)
            ->setParameter('id', $id)
            ->getQuery()
            ->getOneOrNullResult();

        if (
            $result &&
            !strpos($result->getAlphaImage(), 'default_file') &&
            !strpos($result->getSemiTransparentImage(), 'default_file')
        ) {
            $result = null;
        }
        return $result;
    }

    public function getTransparentPatterns()
    {
        $results = $this->createQueryBuilder('q')
            ->where('q.alphaImage IS NOT NULL')
            ->orWhere('q.semiTransparentImage IS NOT NULL')
            ->andWhere('q.isForBlackCover =:isForBlackCover')
            ->setParameter('isForBlackCover', 0)
            ->getQuery()
            ->getResult();
        if (count($results)) {
            foreach ($results as $key => $result) {
                if (
                    !strpos($result->getAlphaImage(), 'default_file') &&
                    !strpos($result->getSemiTransparentImage(), 'default_file')
                ) {
                    unset($results[$key]);
                }
            }
        }
        return $results;
    }

    public function getBlackPatternById($id)
    {
        return $this->createQueryBuilder('q')
            ->andWhere('q.isForBlackCover =:isForBlackCover')
            ->andWhere('q.id =:id')
            ->setParameter('id', $id)
            ->setParameter('isForBlackCover', 1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getBlackPatterns()
    {
        return $this->createQueryBuilder('q')
            ->where('q.alphaImage IS NULL')
            ->orWhere('q.semiTransparentImage IS NULL')
            ->andWhere('q.isForBlackCover =:isForBlackCover')
            ->setParameter('isForBlackCover', 1)
            ->getQuery()
            ->getResult();
    }

    public function getNotTransparentPatternById($id)
    {
        return $this->createQueryBuilder('q')
            ->where('q.alphaImage IS NULL')
            ->orWhere('q.semiTransparentImage IS NULL')
            ->andWhere('q.id =:id')
            ->andWhere('q.isForBlackCover =:isForBlackCover')
            ->setParameter('isForBlackCover', 0)
            ->setParameter('id', $id)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getNotTransparentPatterns()
    {
        return $this->createQueryBuilder('q')
            ->where('q.alphaImage IS NULL')
            ->orWhere('q.semiTransparentImage IS NULL')
            ->andWhere('q.isForBlackCover =:isForBlackCover')
            ->setParameter('isForBlackCover', 0)
            ->getQuery()
            ->getResult();
    }

    public function getPatternsByIds(array $ids)
    {
        return $this->createQueryBuilder('p')
            ->where('p.file IS NOT NULL')
            ->andWhere("p.id IN(:ids)")
            ->setParameter('ids', array_values($ids))
            ->getQuery()
            ->getResult();
    }

    public function getArrayList()
    {
        $patterns = $this->createQueryBuilder('p')
            ->select('p.title,p.id')
            ->addOrderBy('p.title', 'ASC')
            ->getQuery()
            ->getArrayResult();
        $result = [];
        if ($patterns) {
            foreach ($patterns as $pattern) {
                $result[$pattern['title']] = $pattern['id'];
            }
        }
        return $result;
    }
}
