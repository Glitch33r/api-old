<?php

namespace ApiBundle\Entity\Repository;
/**
 * NonStandartCoverRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Doctrine\Common\Collections\ArrayCollection;
use Site\FrontendBundle\Services\FilterQueryHelper;

class NonStandartCoverRepository extends \Doctrine\ORM\EntityRepository
{
//    public function getByIdsForSearch($ids)
//    {
//        $query = $this->createQueryBuilder('q');
//        $query
//            ->andWhere('q.id IN (:ids)')
//            ->setParameters([
//                'ids' => $ids,
//            ]);
//
//        $result = $query->getQuery()->getResult();
//
//        return $result;
//    }

    public function getByPhone($id,$filter,$length=null){
        $q = $this->createQueryBuilder('ns')
            ->select('ns,p')
            ->leftJoin('ns.phones','p')
            ->leftJoin('ns.colors','cl')
            ->leftJoin('ns.materials','mt')
            ->leftJoin('ns.types','tp')
            ->leftJoin('ns.tags','tg')
            ->where('p.id = :id')
            ->andWhere('ns.notAvailable = :state')
            ->setParameter('id',$id)
            ->setParameter('state',false)
            ;
        if($filter->range){
            if($filter->range['min']>$filter->range['max'])$filter->range['max']=$filter->range['min'];
            $q->andWhere('ns.filter_price >= :min AND ns.filter_price <= :max')
                ->setParameter('min',$filter->range['min'])
                ->setParameter('max',$filter->range['max'])
            ;
        }
        if($filter->promo){
            $q->andWhere('ns.promo_price IS NOT NULL')
            ;
        }
        $queryHelper = new FilterQueryHelper();
        $params = [
            [
                'query_alias'=>'p',
                'property'=>'phones'
            ],
            [
                'query_alias'=>'cl',
                'property'=>'colors'
            ],
            [
                'query_alias'=>'mt',
                'property'=>'materials'
            ],
            [
                'query_alias'=>'tp',
                'property'=>'types'
            ],
            [
                'query_alias'=>'tg',
                'property'=>'tags'
            ],
        ];
        $q = $queryHelper->addFilterItemsQuery($q,$params,$filter);
        if($length)$q->setMaxResults($length);
        return $q->addOrderBy('ns.priority','DESC')
            ->getQuery()
            ->getResult()
            ;
    }

    /**
     * subquery for hot seller
     *
     * @param $id
     * @param $linkname
     * @param $filter
     * @return \Doctrine\ORM\Query
     */
    public function getHotSellerByPhone($id,$linkname,$filter){
        $q = $this->createQueryBuilder('ns')
            ->select('ns.id')
            ->leftJoin('ns.phones','p')
            ->leftJoin('ns.hotSellers','h')
            ->leftJoin('ns.colors','cl')
            ->leftJoin('ns.materials','mt')
            ->leftJoin('ns.types','tp')
            ->leftJoin('ns.tags','tg');
        $conditions = [
            $q->expr()->eq('p.id', $q->expr()->literal($id)),
            $q->expr()->eq('ns.notAvailable', $q->expr()->literal(false)),
            $q->expr()->eq('h.linkname', $q->expr()->literal($linkname))
        ];

        if($filter->range){
            if($filter->range['min']>$filter->range['max'])$filter->range['max']=$filter->range['min'];
            $conditions[] = $q->expr()->gte('ns.filter_price', $q->expr()->literal($filter->range['min']));
            $conditions[] = $q->expr()->lte('ns.filter_price', $q->expr()->literal($filter->range['max']));
        }
        if($filter->promo){
            $conditions[] = $q->expr()->isNotNull('ns.promo_price');
        }
        $queryHelper = new FilterQueryHelper();
        $params = [
            [
                'query_alias'=>'p',
                'property'=>'phones'
            ],
            [
                'query_alias'=>'cl',
                'property'=>'colors'
            ],
            [
                'query_alias'=>'mt',
                'property'=>'materials'
            ],
            [
                'query_alias'=>'tp',
                'property'=>'types'
            ],
            [
                'query_alias'=>'tg',
                'property'=>'tags'
            ],
        ];
        $conditions += $queryHelper->addFilterItemsConditions($q,$params,$filter);
        $andx = $q->expr()->andX();
        $andx->addMultiple($conditions);
        $q->add('where',$andx);
        return $q->distinct()->getQuery();
    }
    public function getHotSellerAddCollection($id,$filter=[])
    {
        $q = $this->createQueryBuilder('c')
            ->leftJoin('c.hotSellers', 'h')
            ->where('h.id != :id OR h.id IS NULL')
            ->setParameter('id', $id);
        if (isset($filter['phones']) && $filter['phones']) {
            $q->leftJoin('c.phones', 'ph')
                ->andWhere('ph.id IN (:phones)')
                ->setParameter("phones", $filter['phones']);
        }
        return $q->getQuery()->getResult();
    }
    public function getCoversForHotSellerCollection($id,$filter=[]){

        $q = $this->createQueryBuilder('c')
            ->select('c,ph,ct')
            ->leftJoin('c.hotSellers','h')
            ->leftJoin('c.category','ct')
            ->where('h.id = :id')
            ->setParameter('id',$id);
        if(isset($filter['phones'])&&$filter['phones']){
            $q->leftJoin('c.phones','ph')
                ->andWhere('ph.id IN (:phones)')
                ->setParameter("phones",$filter['phones']);
        }
        $q = $q
            ->groupBy('ct')
            ->getQuery()
            ->getResult()
        ;
        if(is_array($q))$q=new ArrayCollection($q);
        return $q;
    }
    public function getByIds($ids){
        return $this->createQueryBuilder('ns','ns.id')
            ->where('ns.id IN (:ids)')
            ->setParameter('ids',$ids)
            ->getQuery()
            ->getResult();
    }
    public function getSuggestionsByPhone($id,$slug){
        $q =  $this->createQueryBuilder('ns')
            ->select('ns.id')
            ->leftJoin('ns.phones','p')
        ;
        return $q->add('where', $q->expr()->andX(
            $q->expr()->eq('p.id', $q->expr()->literal($id)),
            $q->expr()->eq('ns.notAvailable', $q->expr()->literal(false)),
            $q->expr()->eq('ns.suggestionAvailable', $q->expr()->literal(true)),
            $q->expr()->neq('ns.slug', $q->expr()->literal($slug))
            )
        );
    }
    public function getBySlug($slug){
        return $this->createQueryBuilder('c')
            ->select('c,tg')
            ->leftJoin('c.tags','tg')
            ->where('c.slug = :slug')
            ->andWhere('c.notAvailable = :state')
            ->setParameter('slug',$slug)
            ->setParameter('state',false)
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }
    public function findOneWithOrderById($id,$orderId){
        return $this->createQueryBuilder('ns')
            ->select('ns,oh,or')
            ->leftJoin('ns.nonStandartCoverHasOrders','oh')
            ->leftJoin('oh.order','or')
            ->where('ns.id = :id')
            ->andWhere('or.id = :orderId')
            ->setParameter('id',$id)
            ->setParameter('orderId',$orderId)
            ->getQuery()
            ->getSingleResult()
        ;
    }
    public function getAddOrderItems($data){
        $q = $this->createQueryBuilder('c')
            ->select('c')
        ;
        if(isset($data['category'])&&$data['category']){
            $q->leftJoin('c.category','ct')
                ->andWhere('ct.id = :ctId')
                ->setParameter('ctId',$data['category']);
        }
        if(isset($data['phone'])&&$data['phone']){
            $q->leftJoin('c.phones','ph')
                ->andWhere('ph.slug IN (:phSlug)')
                ->setParameter('phSlug',$data['phone']);
        }
        return $q->getQuery()->getResult();
    }
    public function getCodAddOrderItems($data){
        if(!isset($data['text'])||!$data['text']){
            return null;
        }
        $text = preg_replace('/\s+/', '', $data['text']);
        $text = substr($text,2,strlen($text));
        $text = explode('-',$text);
        if(count($text)<2){
            return null;
        }
        $q = $this->createQueryBuilder('c')
            ->select('c')
            ->leftJoin('c.phones','ph')
            ->where('c.id LIKE :id')
            ->andWhere('ph.id IN (:phId)')
            ->setParameter('id',(int)$text[0])
            ->setParameter('phId',(int)$text[1])
        ;
        return $q->getQuery()->getResult();
    }
    public function getSuggestionsWithoutPhone($slug){
        $q =  $this->createQueryBuilder('ns')
            ->select('ns.id')
        ;
        return $q->add('where', $q->expr()->andX(
            $q->expr()->eq('ns.notAvailable', $q->expr()->literal(false)),
            $q->expr()->eq('ns.suggestionAvailable', $q->expr()->literal(true)),
            $q->expr()->lt('size(ns.phones)', 1),
            $q->expr()->neq('ns.slug', $q->expr()->literal($slug))
        )
        );
    }
}
