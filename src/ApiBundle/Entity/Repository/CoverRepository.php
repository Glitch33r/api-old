<?php

namespace ApiBundle\Entity\Repository;
/**
 * CoverRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Doctrine\Common\Collections\ArrayCollection;
//use Site\FrontendBundle\Services\FilterQueryHelper;

class CoverRepository extends \Doctrine\ORM\EntityRepository
{

    public function getArr() {
        return $this->createQueryBuilder('v')
//            ->leftJoin('v.phone','phone')
//            ->leftJoin('v.pattern','pattern')
//            ->leftJoin('v.transparentImages','transparentImages')
//            ->leftJoin('v.coverGalleryImages','cover_gallery_images')
//            ->select('v, partial phone.{id,title}, partial pattern.{id, title}')
            ->getQuery()
//            ->setMaxResults(100)
            ->getArrayResult();

    }

    public function getByIdsForSearch($ids)
    {
        $query = $this->createQueryBuilder('q');
        $query
            ->andWhere('q.id IN (:ids)')
            ->setParameters([
                'ids' => $ids,
            ]);

        $result = $query->getQuery()->getResult();

        return $result;
    }

    public function exportProductForGoogleCsv(){
        return $this->createQueryBuilder('q')
            ->select('partial q.{id, title, slug, image, promo_price, price}, partial p.{id, description, price, promoCoef, title}, partial phone.{id, price, vendor, title}, partial ct.{id, price}, partial vendor.{id, title}')
            ->leftJoin('q.pattern','p')
            ->leftJoin('q.phone', 'phone')
            ->leftJoin('phone.vendor', 'vendor')
            ->leftJoin('q.coverType','ct')
            ->andWhere('q.notAvailable = :notAvailable')
            ->setParameter('notAvailable',0)
//            ->setMaxResults(1)
            ->getQuery()
            ->getArrayResult()
            ;
    }

    public function getCoversByPatternAndLinkname($patternId,$linkname)
    {
        return $this->createQueryBuilder('c')
            ->select('c,p,pt,ct,ti,bg')
            ->leftJoin('c.pattern','pt')
            ->leftJoin('c.phone','p')
            ->leftJoin('p.phoneBackgrounds','bg')
            ->leftJoin('c.coverType','ct')
            ->leftJoin('c.transparentImages','ti')
            ->where('pt.id = :pId')
            ->andWhere('ct.linkName = :linkname')
            ->orderBy('c.id', 'ASC')
            ->setParameter('linkname',$linkname)
            ->setParameter('pId',intval($patternId))
            ->getQuery()
            ->getResult()
            ;
    }
    public function getCoversByPhoneAndLinkname($id,$linkname){
        return $this->createQueryBuilder('c')
            ->select('c,p,pt,ct,ti,bg')
            ->leftJoin('c.pattern','pt')
            ->leftJoin('c.phone','p')
            ->leftJoin('p.phoneBackgrounds','bg')
            ->leftJoin('c.coverType','ct')
            ->leftJoin('c.transparentImages','ti')
            ->where('p.id = :pId')
            ->andWhere('ct.linkName = :linkname')
            ->orderBy('c.id', 'ASC')
            ->setParameter('linkname',$linkname)
            ->setParameter('pId',intval($id))
            ->getQuery()
            ->getResult()
            ;
    }
    public function getCoversByPhoneAndType($phoneId,$linkname)
    {
        return $this->createQueryBuilder('c')
            ->select('c,p,pt,ct,ti,v,bg')
            ->leftJoin('c.phone','p')
            ->leftJoin('c.pattern','pt')
            ->leftJoin('p.vendor','v')
            ->leftJoin('c.coverType','ct')
            ->leftJoin('c.transparentImages','ti')
            ->leftJoin('p.phoneBackgrounds','bg')
            ->where('p.id = :pId')
            ->andWhere('ct.linkName = :linkname')
            ->orderBy('c.id', 'ASC')
            ->setParameter('linkname',$linkname)
            ->setParameter('pId',$phoneId)
            ->getQuery()
            ->getResult()
            ;
    }
    public function getCoversByPhoneAndTag($slug,$slugTag)
    {
        $query = $this->createQueryBuilder('c')
            ->leftJoin('c.phone', 'p')
            ->leftJoin('c.pattern', 'pt')
            ->leftJoin('pt.tags', 't')
            ->where('c.image IS NOT NULL')
            ->andWhere('p.slug = :slug')
            ->andWhere('t.slug = :slugTag')
            ->setParameter('slug', $slug)
            ->setParameter('slugTag', $slugTag)
            ->orderBy('pt.priority', 'DESC')
            ->addOrderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
        return $query;
    }
    public function getCoversByPhone($slug)
    {
        $query = $this->createQueryBuilder('c')
            ->leftJoin('c.phone', 'p')
            ->leftJoin('c.pattern', 'pt')
            ->where('c.image IS NOT NULL')
            ->andWhere('p.slug = :slug')
            ->setParameter('slug', $slug)
            ->orderBy('pt.priority', 'DESC')
            ->addOrderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
        return $query;
    }
    public function getCoversByPhoneAndColor($slug,$color)
    {
        $query = $this->createQueryBuilder('c')
            ->leftJoin('c.phone', 'p')
            ->leftJoin('c.pattern', 'pt')
            ->where('c.image IS NOT NULL')
            ->andWhere('p.slug = :slug')
            ->andWhere('pt.color = :color')
            ->orderBy('pt.priority', 'DESC')
            ->addOrderBy('c.createdAt', 'DESC')
            ->setParameter('slug', $slug)
            ->setParameter('color', $color)
            ->getQuery()
            ->getResult();
        return $query;
    }
    public function getCoversByPhoneAndTagAndColor($slug, $slugTag, $color = "")
    {
        if ($color == ""){
            return $this->getCoversByPhoneAndTag($slug,$slugTag);
        }
        $query = $this->createQueryBuilder('c')
            ->leftJoin('c.phone', 'p')
            ->leftJoin('c.pattern', 'pt')
            ->leftJoin('pt.tags', 't')
            ->where('c.image IS NOT NULL')
            ->andWhere('p.slug = :slug')
            ->andWhere('t.slug = :slugTag')
            ->andWhere('pt.color = :color')
            ->setParameter('slug', $slug)
            ->setParameter('slugTag', $slugTag)
            ->setParameter('color', $color)
            ->orderBy('pt.priority', 'DESC')
            ->addOrderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
        return $query;
    }
    public function getCoversByIdsAndSlugs(array $ids,array $slugs)
    {
        return $this->createQueryBuilder('c')
            ->where('c.image IS NOT NULL')
            ->andWhere("c.id IN(:ids)")
            ->andWhere("c.slug IN(:slugs)")
            ->setParameter('ids', array_values($ids))
            ->setParameter('slugs', array_values($slugs))
            ->orderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->getResult()
            ;
    }
    public function getCoversByPatternIdsAndPhone(array $ids, $slug)
    {
        return $this->createQueryBuilder('c')
            ->leftJoin('c.pattern','p')
            ->leftJoin('c.phone','ph')
            ->where('c.image IS NOT NULL')
            ->andWhere("p.id IN(:ids)")
            ->andWhere('ph.slug = :slug')
            ->setParameter('ids', array_values($ids))
            ->setParameter('slug',$slug)
            ->orderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->getResult()
            ;
    }
    public function getCoverByPatternAndPhone($patternId,$phoneId)
    {
        return $this->createQueryBuilder('c')
            ->leftJoin('c.pattern','p')
            ->leftJoin('c.phone','ph')
            ->where('p.id = :pId')
            ->andWhere('ph.id = :phId')
            ->setParameter('pId',$patternId)
            ->setParameter('phId',$phoneId)
            ->getQuery()
            ->getResult()
            ;
    }
    public function search($searchText)
    {
        return $this->createQueryBuilder('c')
            ->select('c')
            ->leftJoin('c.pattern','pt')
            ->where('c.title LIKE :searchText')
            ->orWhere('c.title LIKE :searchText2')
            ->andWhere('c.image IS NOT NULL')
            ->setParameter('searchText', '% '.$searchText.'%')
            ->setParameter('searchText2', $searchText.'%')
            ->orderBy('pt.priority', 'DESC')
            ->addOrderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }
    public function getByPhone($id,$filter,$length=null, $isBlack = false){
        $q = $this->createQueryBuilder('c','c.id')
            ->select('c, p,pt')
            ->leftJoin('c.phone','p')
            ->leftJoin('c.pattern','pt')
            ->leftJoin('pt.colors','cl')
            ->leftJoin('pt.materials','mt')
            ->leftJoin('pt.types','tp')
            ->leftJoin('pt.tags','tg');
        $q
            ->where($q->expr()->eq('p.id', $q->expr()->literal($id)))
            ->andWhere($q->expr()->eq('c.notAvailable', $q->expr()->literal(false)))
            ->andWhere($q->expr()->eq('pt.notAvailable', $q->expr()->literal(false)))
            ->andWhere($q->expr()->eq('pt.isForBlackCover', $q->expr()->literal($isBlack)))
            ;
        if($filter->range){
            if($filter->range['min']>$filter->range['max'])$filter->range['max']=$filter->range['min'];
            $q->andWhere('c.filterPrice >= :min AND c.filterPrice <= :max')
                ->setParameter('min',$filter->range['min'])
                ->setParameter('max',$filter->range['max'])
            ;
        }
        if($filter->promo){
            $q->andWhere('c.promo_price IS NOT NULL')
            ;
        }
        $queryHelper = new FilterQueryHelper();
        $params = [
            [
                'query_alias'=>'p',
                'property'=>'phones'
            ],
            [
                'query_alias'=>'cl',
                'property'=>'colors'
            ],
            [
                'query_alias'=>'mt',
                'property'=>'materials'
            ],
            [
                'query_alias'=>'tp',
                'property'=>'types'
            ],
            [
                'query_alias'=>'tg',
                'property'=>'tags'
            ],
        ];
        $q = $queryHelper->addFilterItemsQuery($q,$params,$filter);
//        if($length)$q->setMaxResults($length);
        $q->orderBy('pt.priority', 'DESC')
            ->addOrderBy('c.createdAt', 'DESC');
        return $q->getQuery()->getResult();
    }
    public function getRandLimitBy($limit){
        return $this->createQueryBuilder('c')
            ->leftJoin('c.phone','p')
            ->where('p.slug = :slug')
            ->setParameter('slug','iphone-5-5s')
            ->addSelect('RAND() as HIDDEN rand')
            ->addOrderBy('rand')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    /**
     * get hotseller covers ids subquery
     *
     * @param $id
     * @param $linkname
     * @param $filter
     * @return \Doctrine\ORM\Query
     */
    public function getHotSellerByPhone($id,$linkname,$filter){
        $q= $this->createQueryBuilder('c')
            ->select('c.id')
            ->leftJoin('c.phone','p')
            ->leftJoin('c.pattern','pt')
            ->leftJoin('pt.colors','cl')
            ->leftJoin('pt.materials','mt')
            ->leftJoin('pt.types','tp')
            ->leftJoin('pt.tags','tg')
            ->leftJoin('c.hotSellers','h');
        $conditions = [
            $q->expr()->eq('p.id', $q->expr()->literal($id)),
            $q->expr()->eq('c.notAvailable', $q->expr()->literal(false)),
            $q->expr()->eq('pt.notAvailable', $q->expr()->literal(false)),
            $q->expr()->eq('h.linkname', $q->expr()->literal($linkname))
        ];
        if($filter->range){
            if($filter->range['min']>$filter->range['max'])$filter->range['max']=$filter->range['min'];
            $conditions[]=$q->expr()->gte('c.filterPrice', $q->expr()->literal($filter->range['min']));
            $conditions[]=$q->expr()->lte('c.filterPrice', $q->expr()->literal($filter->range['max']));
        }
        if($filter->promo){
            $conditions[] = $q->expr()->isNotNull('c.promo_price');
        }
        $queryHelper = new FilterQueryHelper();
        $params = [
            [
                'query_alias'=>'p',
                'property'=>'phones'
            ],
            [
                'query_alias'=>'cl',
                'property'=>'colors'
            ],
            [
                'query_alias'=>'mt',
                'property'=>'materials'
            ],
            [
                'query_alias'=>'tp',
                'property'=>'types'
            ],
            [
                'query_alias'=>'tg',
                'property'=>'tags'
            ],
        ];
        $conditions += $queryHelper->addFilterItemsConditions($q,$params,$filter);
        $andx = $q->expr()->andX();
        $andx->addMultiple($conditions);
        $q->add('where',$andx);
        return $q->distinct()->getQuery();
    }
    public function getHotSellerAddCollection($id,$filter=[],$limit=0)
    {
        $q = $this->createQueryBuilder('c')
            ->leftJoin('c.hotSellers', 'h')
            ->where('h.id != :id OR h.id IS NULL')
            ->setParameter('id', $id);
        if (isset($filter['phones']) && $filter['phones']) {
            $q->leftJoin('c.phone', 'ph')
                ->andWhere('ph.id IN (:phones)')
                ->setParameter("phones", $filter['phones']);
        }
        if (isset($filter['patterns']) && $filter['patterns']) {
            $q->leftJoin('c.pattern', 'p')
                ->andWhere('p.id IN (:patterns)')
                ->setParameter('patterns', $filter['patterns']);
        }
        if($limit)$q->setMaxResults($limit);
        return $q->getQuery()->getResult();
    }
    public function getCoversForHotSellerCollection($id,$filter=[]){
        $q = $this->createQueryBuilder('c')
            ->leftJoin('c.hotSellers','h')
            ->where('h.id = :id')
            ->setParameter('id',$id);
        if(isset($filter['phones'])&&$filter['phones']){
            $q->leftJoin('c.phone','ph')
                ->andWhere('ph.id IN (:phones)')
                ->setParameter("phones",$filter['phones']);
        }
        if(isset($filter['patterns'])&&$filter['patterns']){
            $q->leftJoin('c.pattern','p')
                ->andWhere('p.id IN (:patterns)')
                ->setParameter('patterns',$filter['patterns']);
        }
        $q = $q->getQuery()->getResult();
        if(is_array($q))$q=new ArrayCollection($q);
        return $q;
    }
    public function getByIds($ids){
        return $this->createQueryBuilder('c','c.id')
            ->where('c.id IN (:ids)')
            ->setParameter('ids',$ids)
            ->getQuery()
            ->getResult();
    }
    public function getSuggestionsByPhone($id,$slug){
        $q =  $this->createQueryBuilder('c')
            ->select('c.id')
            ->leftJoin('c.phone','ph')
            ->leftJoin('c.pattern', 'pt');
        $q->add('where', $q->expr()->andX(
            $q->expr()->eq('ph.id', $q->expr()->literal($id)),
            $q->expr()->eq('pt.notAvailable', $q->expr()->literal(false)),
            $q->expr()->eq('c.notAvailable', $q->expr()->literal(false)),
            $q->expr()->orX(
                $q->expr()->eq('c.suggestionAvailable', $q->expr()->literal(true)),
                $q->expr()->eq('pt.suggestionAvailable', $q->expr()->literal(true))
            ),
            $q->expr()->neq('c.slug', $q->expr()->literal($slug))
            )
        )
            ;
        return $q;
    }
    public function getBySlug($slug){
        return $this->createQueryBuilder('c')
            ->select('c,ph,pt,tg,vendor,gallery,ptGallery')
            ->leftJoin('c.phone','ph')
            ->leftJoin('c.coverGalleryImages','gallery')
            ->leftJoin('ph.vendor','vendor')
            ->leftJoin('c.pattern','pt')
            ->leftJoin('pt.patternGalleryImages','ptGallery')
            ->leftJoin('pt.tags','tg')
            ->where('c.slug = :slug')
            ->andWhere('c.notAvailable = :state')
            ->andWhere('pt.notAvailable = :state')
            ->setParameter('slug',$slug)
            ->setParameter('state',false)
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }
    public function getAddOrderItems($data){
        $q = $this->createQueryBuilder('c')
            ->select('c')
        ;
        if(isset($data['pattern'])&&$data['pattern']){
            $q->leftJoin('c.pattern','pt')
            ->andWhere('pt.id = :ptId')
            ->setParameter('ptId',$data['pattern']);
        }
        if(isset($data['phone'])&&$data['phone']){
            $q->leftJoin('c.phone','ph')
                ->andWhere('ph.slug = :slug')
                ->setParameter('slug',$data['phone']);
        }
        return $q->getQuery()->getResult();
    }
    public function getByPhoneRegenerate($id){
        return $this->createQueryBuilder('c')
            ->leftJoin('c.phone','ph')
            ->leftJoin('c.pattern','pt')
            ->leftJoin('ph.vendor','v')
            ->where('ph.id = :id')
            ->setParameter('id',$id)
            ->getQuery()
            ->getResult()
            ;
    }
    public function getIdsByPhone($id){
        return $this->createQueryBuilder('c','c.id')
            ->leftJoin('c.phone','ph')
            ->where('ph.id = :id')
            ->setParameter('id',$id)
            ->getQuery()
            ->getResult()
            ;
    }
    public function getCodAddOrderItems($data){
        if(!isset($data['text'])||!$data['text']){
            return null;
        }
        $text = preg_replace('/\s+/', '', $data['text']);
        $text = explode('-',$text);
        if(count($text)<2){
            return null;
        }
        $q = $this->createQueryBuilder('c')
            ->leftJoin('c.pattern','pt')
            ->leftJoin('c.phone','ph')
            ->where('ph.id LIKE :phId')
            ->andWhere('pt.id LIKE :ptId')
            ->setParameter('ptId',(int)$text[0])
            ->setParameter('phId',(int)$text[1])
        ;
        return $q->getQuery()->getResult();
    }
}
